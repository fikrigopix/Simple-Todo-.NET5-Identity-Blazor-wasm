@using TodoForPolyrific.Shared

<h3>@ListStatus (@todos.Count())</h3>

<ul class="dropzone @dropClass"
    ondragover="event.preventDefault();"
    ondragstart="event.dataTransfer.setData('', event.target.id);"
    @ondrop="HandleDrop"
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDragLeave">

    @foreach (var todo in todos)
    {
        <Job TodoViewModel="todo" OnDeleteSuccess="OnDeleteSuccess"></Job>
    }
</ul>

@code {
    [CascadingParameter] JobContainer Container { get; set; }
    [Parameter] public TodoStatusEnum ListStatus { get; set; }
    [Parameter] public TodoStatusEnum[] AllowedStatuses { get; set; }

    List<TodoViewModel> todos = new List<TodoViewModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        todos.Clear();
        todos.AddRange(Container.Todos.Where(x => x.Status == ListStatus));
    }

    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.Status)
        {
            return;
        }

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        {
            return;
        }

        await Container.UpdateTodoAsync(ListStatus);
    }

    private void OnDeleteSuccess(TodoViewModel deleted)
    {
        todos.Remove(deleted);
    }
}
